---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: default
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: backend
        triggerUpdateLabel: "{{ ansible_date_time.iso8601_basic }}"
    spec:
      initContainers:
        - name: init-create-database-and-user
          image: postgres:{{postgres_version}}
          env:
            # Superuser to create databases
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: admin_username
            # Password of Superuser
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: admin_password
            - name: POSTGRES_HOST
              value: "{{ postgres_host }}"
            - name: POSTGRES_PORT
              value: "{{ postgres_port }}"
            # Database to create
            - name: APP_DATABASE_NAME
              valueFrom:
                  secretKeyRef:
                    name: backend
                    key: backend_db_name
            - name: APP_DATABASE_USERNAME
              valueFrom:
                  secretKeyRef:
                    name: backend
                    key: backend_db_user
            - name: APP_DATABASE_PASSWORD
              valueFrom:
                  secretKeyRef:
                    name: backend
                    key: backend_db_password
            # Create Global DB, User and Schema when not exists (the Postgres way)
          command: [ "sh", "-c",
            "echo \"SELECT 'CREATE DATABASE $APP_DATABASE_NAME' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$APP_DATABASE_NAME')\\gexec \" | psql -h $POSTGRES_HOST -U $POSTGRES_USER &&
                       echo \"SELECT 'CREATE USER $APP_DATABASE_USERNAME' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = '$POSTGRES_APP_DATABASE_USERNAME')\\gexec \" | psql -h $POSTGRES_HOST -U $POSTGRES_USER $APP_DATABASE_NAME &&
                       echo \"ALTER USER $APP_DATABASE_USERNAME WITH PASSWORD '$APP_DATABASE_PASSWORD'\" | psql -h $POSTGRES_HOST -U $POSTGRES_USER &&
                       echo \"ALTER DATABASE $APP_DATABASE_NAME OWNER TO $APP_DATABASE_USERNAME\" | psql -h $POSTGRES_HOST -U $POSTGRES_USER"
          ]
      containers:
      - image: {{docker_registry_host}}/{{project_name}}-backend:{{backend_version}}
        name: backend
        envFrom:
        - secretRef:
            name: backend
        env:
        - name: PRODUCTION
          value: "True"
        - name: ENVIRONMENT
          value: "{{ env }}"
        - name: SENTRY_DSN
          value: "{{ backend_sentry_dsn }}"
        - name: POSTGRES_HOST
          value: "{{ postgres_host }}"
        - name: DATABASE_URL
          value: "postgres://$(backend_db_user):$(backend_db_password)@$(POSTGRES_HOST):5432/$(backend_db_name)"
        resources:
          requests:
            memory: "300Mi"
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        readinessProbe:
          tcpSocket:
            port: 8000
          initialDelaySeconds: 10
        volumeMounts:
        - name: backend-media
          mountPath: /app/media
      imagePullSecrets:
      - name: github-container-registry
      volumes:
      - name: backend-media
        persistentVolumeClaim:
          claimName: backend-media-pvc
---